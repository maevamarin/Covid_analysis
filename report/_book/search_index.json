[
["exploratory-data-analysis.html", "1 Exploratory data analysis 1.1 Description of the state of the spread 1.2 Data selection and alignment", " 1 Exploratory data analysis 1.1 Description of the state of the spread Provide a high level description of the state of the spread. In particular, include the number of days that have passed since the first confirmed case/death, the current stage for confirmed cases/deaths/mortality (i.e., ratio of deaths to confirmed cases). You can: use either words, or tables, or figures, or a bit of each, group your analysis per country, or region, or a bit of each. Worldwide analyze covid19_data %&gt;% group_by(date) %&gt;% summarize(Confirmed= sum(confirmed), Deaths = sum(deaths)) %&gt;% ggplot() + geom_line(aes(x=date, y= Confirmed, col=&quot;Confirmed&quot;)) + geom_line(aes(x=date, y=Deaths, col=&quot;Deaths&quot;)) + scale_x_date(date_breaks = &quot;1 week&quot;, date_labels = &quot;%b %d&quot; ) + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + labs(title = &quot;Higly increase evolution for the confirmed case&quot;, subtitle = &quot;Worldwide representation&quot;, x= &quot;Date&quot;, y= &quot;People&quot;, caption = &quot;data from jh_covid19_data_2020-04-06.csv&quot;) Figure 1.1: Figure 1 covid19_data &lt;- covid19_data %&gt;% mutate(ratio=(deaths/confirmed)) covid19_data$ratio[is.nan(covid19_data$ratio)]&lt;-0 covid19_data %&gt;% group_by(date) %&gt;% summarize(Mean_Ratio = mean(ratio)) %&gt;% ggplot() + geom_line(aes(x=date, y=Mean_Ratio)) + scale_x_date(date_breaks = &quot;1 week&quot;, date_labels = &quot;%b %d&quot; ) + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + labs(title = &quot;Highly increase in the ratio deaths/confirmed&quot;, subtitle = &quot;Worldwide representation&quot;, x= &quot;Date&quot;,y= &quot;Ratio&quot;, caption = &quot;data from jh_covid19_data_2020-04-06.csv&quot;) Figure 1.2: Figure 2 covid19_data %&gt;% group_by(date,region) %&gt;% summarize(Confirmed= sum(confirmed)) %&gt;% ggplot(aes(x=date, y= Confirmed, colour= region)) + geom_line() + labs(title = &quot;Flat increase and early deperature in confirmed case in the East Asia &amp; Pacific&quot;, subtitle = &quot;Worldwide representation group by region&quot;, x= &quot;Date&quot;, y= &quot;Confirmed case&quot;, caption = &quot;data from jh_covid19_data_2020-04-06.csv&quot;) + scale_x_date(date_breaks = &quot;1 week&quot;, date_labels = &quot;%b %d&quot; ) + theme(axis.text.x = element_text(angle = 90, hjust = 1)) Figure 1.3: Figure 3 covid19_data %&gt;% group_by(date,region) %&gt;% summarize(Deaths= sum(deaths)) %&gt;% ggplot(aes(x=date, y= Deaths, colour= region)) + geom_line() + labs( title = &quot;Exponential curve for the deaths in the region of Europe \\n&amp; Central Asia&quot;, subtitle = &quot;Worldwide representation group by region&quot;, x= &quot;Date&quot;, y= &quot;Deaths&quot;, caption = &quot;data from jh_covid19_data_2020-04-06.csv&quot;) + scale_x_date(date_breaks = &quot;1 week&quot;, date_labels = &quot;%b %d&quot; ) + theme(axis.text.x = element_text(angle = 90, hjust = 1)) Figure 1.4: Figure 4 covid19_data %&gt;% group_by(date,region) %&gt;% summarize(Mean_ratio = mean(ratio)) %&gt;% ggplot(aes(x=date, y= Mean_ratio, colour= region)) + geom_line()+ labs( title = &quot;We observe an increase in term of the ratio deaths/confirmed &quot;, subtitle = &quot;Worldwide representation groupy by region&quot;, x= &quot;Date&quot;, y= &quot;Deaths/Confirmed&quot;, caption = &quot;data from jh_covid19_data_2020-04-06.csv&quot;) + scale_x_date(date_breaks = &quot;1 week&quot;, date_labels = &quot;%b %d&quot; ) + theme(axis.text.x = element_text(angle = 90, hjust = 1)) Figure 1.5: Figure 5 covid19_data &lt;- covid19_data %&gt;% mutate(ratio_pop=(confirmed/population)) covid19_data$ratio[is.nan(covid19_data$ratio)]&lt;-0 covid19_data %&gt;% group_by(date,region) %&gt;% summarize(Mean_ratio_pop = mean(ratio_pop)) %&gt;% ggplot(aes(x=date, y= Mean_ratio_pop, colour= region)) + geom_line()+ labs( title = &quot;Europe &amp; Central Asia \\nhas the higest confirmed case by the population&quot;, subtitle = &quot;Worldwide representation groupy by region&quot;, x= &quot;Date&quot;, y= &quot;Confirmed /Population&quot;, caption = &quot;data from jh_covid19_data_2020-04-06.csv&quot;) + scale_x_date(date_breaks = &quot;1 week&quot;, date_labels = &quot;%b %d&quot; ) + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + scale_y_continuous(labels = scales::percent) Figure 1.6: Figure 6 covid19_data &lt;- covid19_data %&gt;% mutate(ratio_death_pop=(deaths/population)) covid19_data$ratio[is.nan(covid19_data$ratio_death_pop)]&lt;-0 covid19_data %&gt;% group_by(date,region) %&gt;% summarize(Mean_ratio_death_pop = mean(ratio_death_pop)) %&gt;% ggplot(aes(x=date, y= Mean_ratio_death_pop, colour= region)) + geom_line()+ labs( title = &quot;Europe &amp; Central Asia \\nhas the higest deaths ratio by the population&quot;, subtitle = &quot;Worldwide representation groupy by region&quot;, x= &quot;Date&quot;, y= &quot;Deaths /Population&quot;, caption = &quot;data from jh_covid19_data_2020-04-06.csv&quot;) + scale_x_date(date_breaks = &quot;1 week&quot;, date_labels = &quot;%b %d&quot; ) + theme(axis.text.x = element_text(angle = 90, hjust = 1)) + scale_y_continuous(labels = scales::percent) Figure 1.7: Figure 7 Produce a worlwide map of the COVID-19 spread at the latest date available in covid19_data for each country, and describe what you see. Hint: ggplot2 package includes two helpful command for this part, namely map_data() to retrieve a map, and geom_map() to draw a map on a plot. Use expand_limits to make sure you display the whole map of the world. covid &lt;- read_csv(file = here::here(&quot;data/jh_covid19_data_2020-04-06.csv&quot;)) ## Parsed with column specification: ## cols( ## country = col_character(), ## iso3c = col_character(), ## date = col_date(format = &quot;&quot;), ## confirmed = col_double(), ## deaths = col_double() ## ) #filter by the latest data available for each country covid_latest =covid %&gt;% group_by(country)%&gt;% filter(date == max(date) ) #add long lat to table worldmap &lt;- map_data(&quot;world&quot;) worldmap= worldmap %&gt;% rename(country=region) graph1= left_join(worldmap, covid_latest,&quot;country&quot;) #plot the table ggplot(graph1, aes(long, lat,group=group))+ geom_polygon(aes(fill = confirmed ), color = &quot;white&quot;)+ scale_fill_viridis_c(option = &quot;C&quot;, labels = scales::comma)+labs(title = &quot;Number of people Confirmed COVID-19 at the latest date available&quot;)+ theme(legend.text = element_text(colour=&quot;blue&quot;, size=6, face=&quot;bold&quot;))+ expand_limits(x =graph1$long, y = graph1$lat) Figure 1.8: Figure 8 1.2 Data selection and alignment To compare the speed of the infection spread between countries, we need to “align” the data. In other words, we model the epidemic using equivalent “starting conditions” for every country. To do that, we filter the data so that the number of confirmed cases (in any country) is greater or equal to the maximal number of confirmed cases at the first day of a specific country. Let \\(C_{d, i}\\) be the number of accumulated confirmed cases on day \\(d\\) for country \\(i\\). Let country \\(k\\) be the one such that it had the highest number of reported cases on the first day in the dataset, that is \\(C_{1, k} \\geq C_{1, i}\\) for any other \\(i\\). Find \\(k\\) and discuss. From covid19_data, extract a new table covid19_data_filtered: Select only the countries \\(i\\), which on some day \\(d_{0,i}\\) have \\(C_{d_{0,i}, i} \\geq C_{0, k}\\). We will call this time \\(d_{0,i}\\) a day-zero for country \\(i\\). In the next sections, we model \\(C_i(t) = C_{d_{0,i} + t,i}\\), that is the spread of the epidemic in country \\(i\\) with \\(t\\) representing “event days”. Remember, for every country the day-zero is, in general, different. However, when a country entered the epidemic stage, we are only interested in number of days that has passed from the date of entry (i.e. day-zero). Remove countries who are left with less than two weeks of data, i.e. we keep those countries whose number of days that has passed from the day-zero of this country is 14 or more. Create a new column called t representing the number of days from the day-zero of this country. Create a new column called confirmed_1e5pop representing the number of confirmed cases per 100,000 habitants. This is useful in order to compare how the spread of the epidemic differs between countries relative to their population. Discuss using either tables or visualizations or both: Which countries are left in covid19_data_filtered? What is the state of the spread there? What is the relationship between t and confirmed_1e5pop? covid19_data %&gt;% group_by(country) %&gt;% filter(date == &quot;2020-01-22&quot;) %&gt;% arrange(desc(confirmed)) %&gt;% head() %&gt;% select(country,date, confirmed, deaths) %&gt;% kable( caption = &quot;List of the first countries touched by the pandemia.&quot; ) %&gt;% kable_styling( bootstrap_options = &quot;striped&quot;) Table 1.1: List of the first countries touched by the pandemia. country date confirmed deaths China 2020-01-22 548 17 Japan 2020-01-22 2 0 Thailand 2020-01-22 2 0 Korea, South 2020-01-22 1 0 USA 2020-01-22 1 0 Afghanistan 2020-01-22 0 0 &quot; The $k$ country is China, with 548 confirmed cases ar the earliest data in the data set. In order to do comparisons, we should create a subset where the countries&#39; day 1 starts then the number of confirmed cases reached 548.&quot; ## [1] &quot; The $k$ country is China, with 548 confirmed cases ar the earliest data in the data set. In order to do comparisons, we should create a subset where the countries&#39; day 1 starts then the number of confirmed cases reached 548.&quot; # Filtering the data to obtain a subset containing only the first cases reported in the countries covid19_data_filtered &lt;- covid19_data %&gt;% filter(confirmed &gt;= 548 ) %&gt;% group_by(country) %&gt;% filter(min(date) %--% max(date) &gt;=int_length(dweeks(2)))%&gt;% mutate(t=as.numeric(min(date)%--%date)%/%86400)%&gt;% mutate(confirmed_1e5pop= confirmed*100000/population) head(covid19_data_filtered) %&gt;% kable() country iso3c date confirmed deaths population land_area_skm pop_density pop_largest_city gdp_capita life_expectancy region income ratio ratio_pop ratio_death_pop t confirmed_1e5pop Australia AUS 2020-03-18 568 6 2.5e+07 7692020 3.25 4792281 56842 82.5 East Asia &amp; Pacific High income 0.011 0 0 0 2.27 Australia AUS 2020-03-19 681 6 2.5e+07 7692020 3.25 4792281 56842 82.5 East Asia &amp; Pacific High income 0.009 0 0 1 2.73 Australia AUS 2020-03-20 791 7 2.5e+07 7692020 3.25 4792281 56842 82.5 East Asia &amp; Pacific High income 0.009 0 0 2 3.17 Australia AUS 2020-03-21 1071 7 2.5e+07 7692020 3.25 4792281 56842 82.5 East Asia &amp; Pacific High income 0.007 0 0 3 4.29 Australia AUS 2020-03-22 1549 7 2.5e+07 7692020 3.25 4792281 56842 82.5 East Asia &amp; Pacific High income 0.005 0 0 4 6.20 Australia AUS 2020-03-23 1682 7 2.5e+07 7692020 3.25 4792281 56842 82.5 East Asia &amp; Pacific High income 0.004 0 0 5 6.73 # plot of the evolution of the number of case covid19_data_filtered %&gt;% filter(confirmed&gt;=50000)%&gt;% ggplot(aes(x=date,y=confirmed, fill=country, col=country)) + geom_line()+ labs ( y= &quot;Confrimed case&quot;, title = &quot;USA has the highest evolution of the COVID-19&quot;, subtitle=&quot;The evolution of confirmed case in the 7 more impacted countries&quot; ) + scale_x_date(date_breaks = &quot;1 week&quot;, date_labels = &quot;%b %d&quot; ) + theme(axis.text.x = element_text(angle = 90, hjust = 1)) # same plot but in proportion to the number of habitant covid19_data_filtered %&gt;% filter(confirmed&gt;=50000)%&gt;% ggplot(aes(x=date,y=confirmed_1e5pop, fill=country, col=country)) + geom_line()+ labs ( y= &quot;confrimed case per 100&#39;000 habitants&quot;, title = &quot;Spain has the highest evolution per 100&#39;000 habitants&quot;, subtitle=&quot;The evolution of confirmed case in the 7 more impacted countries&quot; )+ scale_x_date(date_breaks = &quot;1 week&quot;, date_labels = &quot;%b %d&quot; ) + theme(axis.text.x = element_text(angle = 90, hjust = 1)) &quot; Many countries do not appear on the subset covid_data_filtered because of the threshold of 548 confirmed cases. The measures taken to prevent the covid-19 worldwide have been shared and are common among countries. This preventive measures would have been braked the spread of the virus, making more difficult to reach our threshold of 548. Furthermore, the difference in mean and in protocoles to confirm a case of coronavirus greatly varies among countries in the world. This second barrier is perhaps the greatest to overcome because of the global shortage of testing material. The reported confirmed cases might hide an unknown number of non-tested but positive case to coronavirus (Omitten/hidden cases are like false negative). The countries removed of our panel due to our filtering are 39: Algeria, Argentina, Armenia, Azerbaijan, Bahrain, Belarus, Bosnia and Herzegovina, Cameroon, Colombia, Croatia, Dominican Republic, Egypt, Estonia, Hungary, India, Indonesia, Iraq, Kazakhstan, Kuwait, Lithuania, Mexico, Moldova, Morocco, New Zealand, North Macedonia, Panama, Peru, Philippines, Qatar, Romania, Russia, Saudi Arabia, Serbia, Singapore, Slovenia, South Africa, Tunisia, Ukraine, United Arab Emirates. The countries included in the filtered data are 28 : Australia, Austria, Belgium, Brazil, Canada, China, Czechia, Denmark, France, Germany, Iran, Ireland, Israel, Italy, Japan, South Korea, Luxembourg, Malaysia, Netherlands, Norway, Pakistan, Portugal, Spain, Sweden, Switzerland, Turkey, United Kingdom, USA &quot; ## [1] &quot; Many countries do not appear on the subset covid_data_filtered because of the threshold of 548 confirmed cases. The measures taken to prevent the covid-19 worldwide have been shared and are common among countries. This preventive measures would have been braked the spread of the virus, making more difficult to reach our threshold of 548. Furthermore, the difference in mean and in protocoles to confirm a case of coronavirus greatly varies among countries in the world. This second barrier is perhaps the greatest to overcome because of the global shortage of testing material. The reported confirmed cases might hide an unknown number of non-tested but positive case to coronavirus (Omitten/hidden cases are like false negative).\\n\\nThe countries removed of our panel due to our filtering are 39: Algeria, Argentina, Armenia, Azerbaijan, Bahrain, Belarus, Bosnia and Herzegovina, Cameroon, Colombia, Croatia, Dominican Republic, Egypt, Estonia, Hungary, India, Indonesia, Iraq, Kazakhstan, Kuwait, Lithuania, Mexico, Moldova, Morocco, New Zealand, North Macedonia, Panama, Peru, Philippines, Qatar, Romania, Russia, Saudi Arabia, Serbia, Singapore, Slovenia, South Africa, Tunisia, Ukraine, United Arab Emirates.\\n\\nThe countries included in the filtered data are 28 : Australia, Austria, Belgium, Brazil, Canada, China, Czechia, Denmark, France, Germany, Iran, Ireland, Israel, Italy, Japan, South Korea, Luxembourg, Malaysia, Netherlands, Norway, Pakistan, Portugal, Spain, Sweden, Switzerland, Turkey, United Kingdom, USA\\n&quot; "],
["introduction.html", "2 Introduction 2.1 The data 2.2 A note on Epidemiological Models 2.3 This assigment", " 2 Introduction 2.1 The data For this assignment, we use COVID-19 data provided by Johns Hopkins University (updated daily), as well as data from the world bank with demographic information. More specifically, we use daily records of total confirmed infection cases (or cumulative number of cases), total number of fatalities (or cumulative number of deaths) per country starting from 2020-01-22 until 2020-04-05. The dataset, downloaded on 2020-04-06, contains 12,975 observations and 13 variables (country, iso3c, date, confirmed, deaths, population, land_area_skm, pop_density, pop_largest_city, gdp_capita, life_expectancy, region, income). 2.2 A note on Epidemiological Models Today’s epidemiological models are mostly described by so called SIR-like models [see details in @Martcheva2015, pp.9--12]. In this class of models, the population is divided into three groups: (S)usceptible — people, might get infected; (I)nfectious — people, who carry the infection and can infect others; (R)ecovered/(R)emoved — people, who have already recovered from the disease and got immunity. The SIR model is a system of ordinary nonlinear differential equations. In this homework, we focus on the following logistic model [see @Batista2020, pp. 2; @Martcheva2015, pp. 35--36]: \\[ \\frac{dC(t)}{dt} = r \\, C(t) \\cdot \\left[1 - \\frac{C(t)}{K}\\right], \\] where \\(C(t)\\) is the accumulated number of cases at time \\(t\\), \\(r\\) is the growth rate (or infection rate), and \\(K\\) is the final size of epidemic. Let \\(C_0\\) be the initial number of cases: in other words, at time \\(t = 0\\), assume that there was \\(C_0\\) accumulated number of cases. The solution of the logistic model is \\[ C(t) = \\frac{K\\cdot C_0}{C_0 + (K-C_0) \\, \\exp(-r\\,t)}, \\] which looks like a scaled logit model in econometrics. 2.3 This assigment Because we only have access to the confirmed cases that are reported, we use those figures as a proxy for the total number of cases, with the understanding that they almost surely underestimates the actual number of interest. In what follows, we do a preliminary exploration of the data. We then use the logistic model to analyze the spread of COVID-19 and try to predict the final number of accumulated confirmed cases for every country. More specifically, we start by focusing on modelling the spread in Switzerland; then apply the same approach to every country in the dataset. "],
["modeling-the-spread-of-covid-19-worldwide.html", "3 Modeling the spread of COVID-19 worldwide 3.1 Fitting the logistic model to every country 3.2 Fitted parameters and long-term predictions", " 3 Modeling the spread of COVID-19 worldwide In this section, we fit the logistic model to every country in the covid19_data_filtered dataset. 3.1 Fitting the logistic model to every country Use nested data, list-columns and logistic_model to fit the logistic model to every country in the dataset. Because, for some countries, the optimization method might not converge, you can use possibly() or something similar. For which country does the optimization fail ? Assess the goodness-of-fit of the logistic model in the various countries. by_country &lt;- covid19_data_filtered %&gt;% group_by(country) %&gt;% nest() tmp &lt;- by_country %&gt;% mutate(log_model = purrr::map(data, possibly(logistic_model, NA))) %&gt;% filter(!is.na(log_model)) fitted_model &lt;- tmp %&gt;% mutate(aug = purrr::map(log_model, augment)) %&gt;% unnest(aug) tmp %&gt;% mutate(tdy = purrr::map(log_model, tidy)) %&gt;% unnest(tdy) %&gt;% select(country,term,estimate,std.error) %&gt;% kable( caption = &quot;List of the first countries touched by the pandemia.&quot; ) %&gt;% kable_styling( bootstrap_options = &quot;striped&quot;) Table 3.1: List of the first countries touched by the pandemia. country term estimate std.error Australia K 6.14e+03 6.03e+01 Australia R 2.62e-01 3.00e-03 Austria K 1.30e+04 1.02e+02 Austria R 2.50e-01 2.00e-03 Belgium K 2.74e+04 7.93e+02 Belgium R 2.08e-01 2.00e-03 Brazil K 1.98e+04 2.15e+03 Brazil R 2.17e-01 6.00e-03 Canada K 2.25e+04 1.24e+03 Canada R 2.33e-01 4.00e-03 Chile K 6.48e+03 2.01e+02 Chile R 2.14e-01 3.00e-03 China K 8.07e+04 4.16e+02 China R 2.77e-01 3.00e-03 Czechia K 6.15e+03 1.98e+02 Czechia R 1.85e-01 4.00e-03 Denmark K 3.81e+04 1.76e+04 Denmark R 8.80e-02 2.00e-03 Ecuador K 6.63e+03 1.10e+03 Ecuador R 1.62e-01 1.10e-02 Finland K 2.82e+03 3.39e+02 Finland R 1.39e-01 1.20e-02 France K 1.46e+05 1.45e+04 France R 1.95e-01 3.00e-03 Germany K 1.11e+05 1.98e+03 Germany R 2.34e-01 2.00e-03 Greece K 2.85e+03 1.64e+02 Greece R 1.25e-01 5.00e-03 Iceland K 2.18e+03 1.22e+02 Iceland R 1.29e-01 6.00e-03 Iran K 6.24e+04 3.29e+03 Iran R 1.83e-01 4.00e-03 Ireland K 7.06e+03 2.63e+02 Ireland R 1.92e-01 3.00e-03 Israel K 9.89e+03 3.38e+02 Israel R 2.80e-01 6.00e-03 Italy K 1.30e+05 1.81e+03 Italy R 2.11e-01 1.00e-03 Korea, South K 9.15e+03 1.11e+02 Korea, South R 2.94e-01 9.00e-03 Luxembourg K 3.14e+03 7.95e+01 Luxembourg R 2.21e-01 7.00e-03 Malaysia K 4.36e+03 1.09e+02 Malaysia R 1.69e-01 3.00e-03 Netherlands K 2.23e+04 2.78e+02 Netherlands R 2.00e-01 1.00e-03 Norway K 6.85e+03 1.30e+02 Norway R 1.57e-01 2.00e-03 Pakistan K 4.74e+04 5.54e+04 Pakistan R 1.01e-01 4.00e-03 Poland K 8.77e+03 7.52e+02 Poland R 1.71e-01 4.00e-03 Portugal K 1.39e+04 2.18e+02 Portugal R 2.48e-01 2.00e-03 Spain K 1.38e+05 2.81e+03 Spain R 2.74e-01 3.00e-03 Sweden K 1.85e+04 2.11e+03 Sweden R 1.20e-01 2.00e-03 Switzerland K 2.15e+04 3.73e+02 Switzerland R 2.46e-01 3.00e-03 Thailand K 2.68e+03 4.88e+01 Thailand R 1.91e-01 3.00e-03 Turkey K 3.26e+04 1.26e+03 Turkey R 3.50e-01 6.00e-03 United Kingdom K 7.98e+04 2.54e+03 United Kingdom R 2.16e-01 1.00e-03 USA K 4.00e+05 1.12e+04 USA R 2.95e-01 2.00e-03 fitted_model %&gt;% ggplot(aes(t,.resid)) + geom_line(aes(colour=country), alpha=1/3) + labs( title = &quot;Increase of the error with the time dimension&quot;, subtitle = &quot;Prediction of the evolution - COVID-19&quot;, x= &quot;Time dimension(day)&quot;, y=&quot;Residuals&quot;, colour=&quot;Country&quot; ) ## In the model, we don&#39;t find the Japan 3.2 Fitted parameters and long-term predictions Describe the fitted parameters (i.e., the final size and the infection rates), both on a per-country basis and some aggregate numbers (e.g., total size of the epidemic over all considered countries). Furthermore, study the evolution (say for \\(t\\) from 0 to 50) of the predictions of the number of confirmed cases from your models. Similarly as was discussed in the last sub-section of the exploratory data analysis, the number of confirmed cases per 100,000 habitants is also important to understand how specific countries are managing the spread of the epidemic. Thus, predict the evolution of this number (i.e., by dividing your predictions for confirmed cases by the population size) and discuss. Hints: Format the fitted parameters using broom::tidy(). For the long-term predictions, you can use data = data.frame(t = 0:50) in add_predictions(). fitted_model_2&lt;- fitted_model %&gt;% filter(t&lt;=50) best_in_each_fitted &lt;- fitted_model_2 %&gt;% group_by(country) %&gt;% filter(row_number(desc(.fitted ))==1) fitted_model_2 %&gt;% ggplot(aes(t,.fitted)) + geom_line(aes(colour=country),alpha=1/3) + labs( title = &quot;Exponential confirmed case prediction for the USA&quot;, subtitle =&quot;Prediction of the evolution COVID-19&quot;, x= &quot;Day&quot;, y=&quot;Prediction for the confirmed case&quot;) fitted_model_2 %&gt;% ggplot(aes(t,.fitted)) + geom_line(aes(colour=country),alpha=1/3) + geom_text(aes(label=country), data = best_in_each_fitted) + labs( title = &quot;Exponential confirmed case prediction for the USA&quot;, subtitle =&quot;Prediction of the evolution COVID-19&quot;, x= &quot;Day&quot;, y=&quot;Prediction for the confirmed case&quot;) ## Same analysis but relative to the population joined&lt;-left_join( covid19_data_filtered %&gt;% select(population,country), fitted_model_2 %&gt;% select(-data,-log_model), by= &quot;country&quot; ) %&gt;% mutate(ratio_pop =.fitted /population) best_in_each &lt;- joined_4 %&gt;% group_by(country) %&gt;% filter(row_number(desc(ratio_pop))==1) joined %&gt;% ggplot(aes(t,ratio_pop))+ geom_line(aes(colour=country),alpha=1/3)+ geom_text(aes(label=country), data = best_in_each)+ labs( title = &quot;Luxembourg and Icelan \\nexponential curve for the COVID-19&quot;, subtile =&quot;Prediction for the confirmed case relative \\n to the population&quot;, x= &quot;Day&quot;, y=&quot;Prediction of the confirmed case/Population&quot;, colour=&quot;Country&quot; ) ## Warning: Removed 27 rows containing missing values (geom_path). "],
["references.html", "References", " References "],
["modeling-the-spread-of-covid-19-in-a-single-country.html", "4 Modeling the spread of COVID-19 in a single country 4.1 The logistic model in R 4.2 The logistic model applied to data from Switzerland", " 4 Modeling the spread of COVID-19 in a single country 4.1 The logistic model in R Using the filtered dataset, we study the spread of COVID-19 with the logistic model. Letting \\(C_{i}(t) = C_{d_{0,i} + t,i}\\), the model for country \\(i\\) can be expressed as: \\[ C_{i}(t) = \\frac{K_{i} \\cdot C_{i}(0)}{C_{i}(0) + (K_{i}-C_{i}(0)) \\, \\exp(-R_{i}\\,t)} \\] The goal is to find the final number of cases \\(K_{i}\\) and the infection rate \\(R_{i}\\). We implement this in R using the following function: # here, we assume that data is a data frame with two variables # - t: the number of event days # - confirmed: the number of confirmed cases at time t logistic_model &lt;- function(data) { data &lt;- data %&gt;% arrange(t) C_0 &lt;- data$confirmed[1] C_max &lt;- data$confirmed[nrow(data)] nls( formula = confirmed ~ K / (1 + ((K - C_0) / C_0) * exp(-R * t)), data = data, start = list(K = 2 * C_max, R = 0.5), control = nls.control(minFactor = 1e-6, maxiter = 100) ) } Notice: We use the nonlinear least square method stats::nls to fit the unknown parameters. In R, the formula above is confirmed ~ K / (1 + ((K - C_0)/C_0) * exp(-R * t)). As starting point \\((K_0, R_0)\\) for the optimiser, we set \\(R_0 = 0.5\\) and \\(K_0 = 2 \\, C(t^*)\\), where \\(t^*\\) is the latest information about accumulated confirmed cases. We further set the control argument as nls.control(minFactor = 1e-6, maxiter = 100). 4.2 The logistic model applied to data from Switzerland From covid19_data_filtered, extract a table covid19_ch which corresponds to data for Switzerland. Then: Use the function above to fit the logistic model for Switzerland Describe its output (fitted parameters, broom::tidy() might be useful here) Discuss the goodness-of-fit. Plot the fitted curve, as well as observed data points. Present the predictions of the model. What is the estimated final size of the epidemic and infection rate in Switzerland? covid19_ch &lt;- covid19_data_filtered %&gt;% filter(country==&quot;Switzerland&quot;) broom::tidy(logistic_model(covid19_ch)) ## # A tibble: 2 x 5 ## term estimate std.error statistic p.value ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 K 21542. 373. 57.7 2.91e-27 ## 2 R 0.246 0.00316 77.9 2.28e-30 augment_model &lt;-broom::augment(logistic_model(covid19_ch)) broom::augment(logistic_model(covid19_ch)) %&gt;% print(n=10) ## # A tibble: 26 x 5 ## t confirmed C_0 .fitted .resid ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 0 652 652 652 0 ## 2 1 652 652 827. -175. ## 3 2 1139 652 1046. 92.8 ## 4 3 1359 652 1320. 39.0 ## 5 4 2200 652 1660. 540. ## 6 5 2200 652 2078. 122. ## 7 6 2700 652 2588. 112. ## 8 7 3028 652 3202. -174. ## 9 8 4075 652 3932. 143. ## 10 9 5294 652 4785. 509. ## # ... with 16 more rows augment_model &lt;-broom::augment(logistic_model(covid19_ch)) ##The prediction shows that the final size of the confirmed case is about 21&#39;500 cases, with an infection rate of 0.246%. augment_model %&gt;% ggplot() + geom_line(aes(x=t, y= confirmed, col=&quot;Observed&quot;)) + geom_line(aes(x=t, y= .fitted, col=&quot;Fitted&quot; )) + labs(title = &quot;Well goodness-of fit&quot;, subtitle = &quot;Between the observed and fitted value&quot;, x= &quot;Time period&quot;,y= &quot;Confirmed people&quot;, col= &quot;Model&quot;) ##Present the prediction plot(logistic_model(covid19_ch)) "]
]
